# MOS 6526 (NMOS) - Accurate Version 
#
# Still todo : Serial Port
#


PIN BIDIRECTIONAL	PIN_PA[8];			# Port A Data
PIN BIDIRECTIONAL	PIN_PB[8];			# Port B Data
PIN OUT			PIN__PC[1];
PIN IN			PIN_TOD[1];			# 50/60Hz clk signal	- relies on correct setting of bit 7 of CRA
PIN BIDIRECTIONAL	PIN_CNT[1];
PIN BIDIRECTIONAL	PIN_SP[1];
PIN IN			PIN_RS[4];			# Register Select
PIN IN			PIN__RES[1];
PIN BIDIRECTIONAL	PIN_DB[8];			# Data Bus
PIN IN			PIN_O2[1];			# Clock (1Mhz signal)
PIN IN			PIN__FLAG[1];
PIN IN			PIN__CS[1];			# Chip Select
PIN IN			PIN_RW[1];
PIN OUT			PIN__IRQ[1];

###

DECLARE 		PRA[8];
DECLARE 		PRB[8];

DECLARE 		DDRA[8];
DECLARE 		DDRB[8];

DECLARE 		TA[16]	ALIAS	TAHI[8]:TALO[8];
DECLARE 		TB[16]	ALIAS	TBHI[8]:TBLO[8];
DECLARE 		TA_LATCH[16]	ALIAS	TALHI[8]:TALLO[8];
DECLARE 		TB_LATCH[16]	ALIAS	TBLHI[8]:TBLLO[8];

DECLARE 		TOD_HR[8]	ALIAS	TOD_PM[1]:%00:TOD_HH[1]:TOD_HL[4];
DECLARE			TOD_MIN[8]	ALIAS	%0:TOD_MH[3]:TOD_ML[4];
DECLARE			TOD_SEC[8]	ALIAS	%0:TOD_SH[3]:TOD_SL[4];
DECLARE			TOD_10TH[8]	ALIAS	%0000:TOD_T[4];

DECLARE			TOD_LAT_HR[8];
DECLARE			TOD_LAT_MIN[8];
DECLARE			TOD_LAT_SEC[8];
DECLARE			TOD_LAT_10TH[8];
DECLARE			TOD_LATCHED[1];
DECLARE			TOD_STOPPED[1];
DECLARE			TOD_CNT[4];

DECLARE 		ALARM_HR[8]	ALIAS	ALARM_PM[1]:%00:ALARM_HH[1]:ALARM_HL[4];
DECLARE			ALARM_MIN[8]	ALIAS	%0:ALARM_MH[3]:ALARM_ML[4];
DECLARE			ALARM_SEC[8]	ALIAS	%0:ALARM_SH[3]:ALARM_SL[4];
DECLARE			ALARM_10TH[8]	ALIAS	%0000:ALARM_T[4];

DECLARE			SDR[8];
DECLARE			SDR_LATCH[8];
DECLARE			SDR_CNT[4];

DECLARE			ICR_MASK[8]	ALIAS	%000:F_FLG[1]:F_SP[1]:F_ALRM[1]:F_TB[1]:F_TA[1];
DECLARE			ICR_DATA[8]	ALIAS	IR[1]:%00:E_FLG[1]:E_SP[1]:E_ALRM[1]:E_TB[1]:E_TA[1];

DECLARE			CRA[8]		ALIAS	HZ_50[1]:SP_OUTPUT[1]:TA_CNT[1]:TA_LOAD[1]:TA_ONESHOT[1]:TA_TOGGLE[1]:TA_PB6_OUT[1]:TA_START[1];
DECLARE			CRB[8]		ALIAS	ALARM[1]:TB_MODE[2]:TB_LOAD[1]:TB_ONESHOT[1]:TB_TOGGLE[1]:TB_PB7_OUT[1]:TB_START[1];

DECLARE			TA_PB6[1];
DECLARE			TB_PB7[1];

HANDLER PIN__RES	ALWAYS
{
	IF ~PIN__RES
	{
		PRA<-0;
		PRB<-0;
		DDRA<-0;
		DDRB<-0;
		TA<-0;
		TB<-0;
		TA_LATCH<-$FFFF;
		TB_LATCH<-$FFFF;
		TOD_CNT<-6;
		TOD_HR<-0;
		TOD_MIN<-0;
		TOD_SEC<-0;
		TOD_10TH<-0;
		TOD_LATCHED<-0;
		TOD_STOPPED<-0;
		TOD_LAT_HR<-0;
		TOD_LAT_MIN<-0;
		TOD_LAT_SEC<-0;
		TOD_LAT_10TH<-0;
		ALARM_HR<-0;
		ALARM_MIN<-0;
		ALARM_SEC<-0;
		ALARM_10TH<-0;
		SDR<-0;
		SDR_LATCH<-0;
		SDR_CNT<-0;
		ICR_MASK<-0;
		ICR_DATA<-0;
		CRA<-0;
		CRB<-0;
		TA_PB6<-0;
		TB_PB7<-0;
	}
}

FUNCTION INTERNAL UpdateIRQPin
{
	PIN__IRQ<-1;
	0->IR;
	IF ((ICR_DATA[0..6]) & (ICR_MASK[0..6])) != 0
	{
		1->IR;
		PIN__IRQ<-0;
	}
}

FUNCTION INTERNAL TickTOD
{
	IF ~TOD_STOPPED
	{
		TOD_T<-TOD_T+1;
		IF TOD_T == 10
		{
			TOD_T<-0;
			TOD_SL<-TOD_SL+1;
			IF TOD_SL == 10
			{
				TOD_SL<-0;
				TOD_SH<-TOD_SH+1;
				IF TOD_SH == 6
				{
					TOD_SH<-0;
					TOD_ML<-TOD_ML+1;
					IF TOD_ML == 10
					{
						TOD_ML<-0;
						TOD_MH<-TOD_MH+1;
						IF TOD_MH == 6
						{
							TOD_MH<-0;
							TOD_HL<-TOD_HL+1;
							IF TOD_HH & (TOD_HL == 2)
							{
								TOD_HH<-0;
								TOD_HL<-0;
								TOD_PM<-~TOD_PM;
							}
							IF (~TOD_HH) & (TOD_HL == 10)
							{
								TOD_HH<-1;
								TOD_HL<-0;
							}
						}
					}
				}
			}
		}
		IF (TOD_HR == ALARM_HR) & (TOD_MIN == ALARM_MIN) & (TOD_SEC == ALARM_SEC) & (TOD_10TH == ALARM_10TH)
		{
			F_ALRM<-1;
			CALL UpdateIRQPin();
		}
	}
}

HANDLER PIN_TOD	TRANSITION(0,1)			# Its not documented whether it counts lo-hi or hi-lo edges, for now i`ll assume low-hi
{
	TOD_CNT<-TOD_CNT-1;
	IF TOD_CNT==0
	{
		TOD_CNT<-6;
		IF HZ_50
		{
			TOD_CNT<-5;
		}
		CALL TickTOD();
	}
}

FUNCTION INTERNAL UpdatePIN_PA
{
	PIN_PA<-PIN_PA & (~DDRA);
	PIN_PA<-PIN_PA | (PRA & DDRA);
}

FUNCTION INTERNAL UpdatePIN_PB
{
	PIN_PB<-PIN_PB & (~DDRB);
	PIN_PB<-PIN_PB | (PRB & DDRB);
	IF TA_PB6_OUT
	{
		0->PIN_PB[6..6];
		TA_PB6->PIN_PB[6..6];
	}
	IF TB_PB7_OUT
	{
		0->PIN_PB[7..7];
		TB_PB7->PIN_PB[7..7];
	}
}

HANDLER PIN_PA		CHANGED
{
	CALL UpdatePIN_PA();
}

HANDLER PIN_PB		CHANGED
{
	CALL UpdatePIN_PB();
}

HANDLER PIN__FLAG	TRANSITION(1,0)
{
	F_FLG<-1;
	CALL UpdateIRQPin();
}

FUNCTION INTERNAL UpdatePIN_DB_Read
{
	IF PIN_RS == %0000
	{
		PIN_DB<-PIN_PA;
	}
	IF PIN_RS == %0001
	{
		PIN_DB<-PIN_PB;
		PIN__PC<-0;
	}
	IF PIN_RS == %0010
	{
		PIN_DB<-DDRA;
	}
	IF PIN_RS == %0011
	{
		PIN_DB<-DDRB;
	}
	IF PIN_RS == %0100
	{
		PIN_DB<-TALO;
	}
	IF PIN_RS == %0101
	{
		PIN_DB<-TAHI;
	}
	IF PIN_RS == %0110
	{
		PIN_DB<-TBLO;
	}
	IF PIN_RS == %0111
	{
		PIN_DB<-TBHI;
	}
	IF PIN_RS == %1000
	{
		PIN_DB<-TOD_10TH;
		IF TOD_LATCHED
		{
			PIN_DB<-TOD_LAT_10TH;
			TOD_LATCHED<-0;
		}
	}
	IF PIN_RS == %1001
	{
		PIN_DB<-TOD_SEC;
		IF TOD_LATCHED
		{
			PIN_DB<-TOD_LAT_SEC;
		}
	}
	IF PIN_RS == %1010
	{
		PIN_DB<-TOD_MIN;
		IF TOD_LATCHED
		{
			PIN_DB<-TOD_LAT_MIN;
		}
	}
	IF PIN_RS == %1011
	{
		PIN_DB<-TOD_HR;
		IF ~TOD_LATCHED
		{
			TOD_LATCHED<-1;
			TOD_LAT_10TH<-TOD_10TH;
			TOD_LAT_SEC<-TOD_SEC;
			TOD_LAT_MIN<-TOD_MIN;
			TOD_LAT_HR<-TOD_HR;
		}
		IF TOD_LATCHED
		{
			PIN_DB<-TOD_LAT_HR;
		}
	}
	IF PIN_RS == %1100
	{
		PIN_DB<-SDR;
	}
	IF PIN_RS == %1101
	{
		PIN_DB<-ICR_DATA;
		ICR_DATA<-0;
		CALL UpdateIRQPin();
	}
	IF PIN_RS == %1110
	{
		PIN_DB<-CRA;
	}
	IF PIN_RS == %1111
	{
		PIN_DB<-CRB;
	}
}

FUNCTION INTERNAL UpdatePIN_DB_Write
{
	IF PIN_RS == %0000
	{
		PRA<-PIN_DB;
	}
	IF PIN_RS == %0001
	{
		PRB<-PIN_DB;
		PIN__PC<-0;
	}
	IF PIN_RS == %0010
	{
		DDRA<-PIN_DB;
	}
	IF PIN_RS == %0011
	{
		DDRB<-PIN_DB;
	}
	IF PIN_RS == %0100
	{
		TALLO<-PIN_DB;
	}
	IF PIN_RS == %0101
	{
		TALHI<-PIN_DB;
		IF ~TA_START
		{
			TA<-TA_LATCH;
		}
	}
	IF PIN_RS == %0110
	{
		TBLLO<-PIN_DB;
	}
	IF PIN_RS == %0111
	{
		TBLHI<-PIN_DB;
		IF ~TB_START
		{
			TB<-TB_LATCH;
		}
	}
	IF PIN_RS == %1000
	{
		IF ALARM
		{
			ALARM_10TH<-PIN_DB;
		}
		IF ~ALARM
		{
			TOD_10TH<-PIN_DB;
			TOD_STOPPED<-0;
		}
	}
	IF PIN_RS == %1001
	{
		IF ALARM
		{
			ALARM_SEC<-PIN_DB;
		}
		IF ~ALARM
		{
			TOD_SEC<-PIN_DB;
		}
	}
	IF PIN_RS == %1010
	{
		IF ALARM
		{
			ALARM_MIN<-PIN_DB;
		}
		IF ~ALARM
		{
			TOD_MIN<-PIN_DB;
		}
	}
	IF PIN_RS == %1011
	{
		IF ALARM
		{
			ALARM_HR<-PIN_DB;
		}
		IF ~ALARM
		{
			TOD_HR<-PIN_DB;
			TOD_STOPPED<-1;
		}
	}
	IF PIN_RS == %1100
	{
		SDR<-PIN_DB;
	}
	IF PIN_RS == %1101
	{
		IF PIN_DB[7..7] == 1
		{
			ICR_MASK<-ICR_MASK | PIN_DB;
		}
		IF PIN_DB[7..7] == 0
		{
			ICR_MASK<-ICR_MASK & (~PIN_DB);
		}
	}
	IF PIN_RS == %1110
	{
		IF (~TA_START) & (PIN_DB[0..0] == 1)
		{
			TA_PB6<-1;
		}
		CRA<-PIN_DB;
		IF TA_LOAD
		{
			TA<-TA_LATCH;
		}
	}
	IF PIN_RS == %1111
	{
		IF (~TB_START) & (PIN_DB[0..0] == 1)
		{
			TB_PB7<-1;
		}
		CRB<-PIN_DB;
		IF TB_LOAD
		{
			TB<-TB_LATCH;
		}
	}
}

FUNCTION INTERNAL TickTimerB
{
	IF TB_START
	{
		TB<-TB-1;
		IF TB==$FFFF
		{
			F_TB<-1;
			TB_PB7<-~TB_PB7;
			TB<-TB_LATCH;
			IF TB_ONESHOT
			{
				TB_START<-0;
			}
			CALL UpdatePIN_PB();
		}
	}
}

FUNCTION INTERNAL TickTimerA
{
	IF TA_START
	{
		TA<-TA-1;
		IF TA==$FFFF
		{
			IF (TB_MODE & %10) == %10
			{
				IF ((TB_MODE==%11) & PIN_CNT) | (TB_MODE[0..0]==%10)
				{
					CALL TickTimerB();
				}
			}
			F_TA<-1;
			TA_PB6<-~TA_PB6;
			TA<-TA_LATCH;
			IF TA_ONESHOT
			{
				TA_START<-0;
			}
			CALL UpdatePIN_PB();
		}
	}
}

HANDLER		PIN_CNT	TRANSITION(0,1)
{
	IF ~SP_OUTPUT
	{
		IF TA_CNT
		{
			CALL TickTimerA();
			CALL UpdateIRQPin();
		}
		IF TB_MODE==%01
		{
			CALL TickTimerB();
			CALL UpdateIRQPin();
		}
	}
}

HANDLER		PIN_O2	TRANSITION(0,1)
{
	PIN__PC<-1;

	IF ~TA_TOGGLE
	{
		TA_PB6<-1;
	}
	IF ~TB_TOGGLE
	{
		TB_PB7<-1;
	}

	# Update DB pin on read
	IF PIN_RW & (PIN__CS==%0)
	{
		CALL UpdatePIN_DB_Read();
	}

	# Update Timers
	IF ~TA_CNT
	{
		CALL TickTimerA();
	}

	IF TB_MODE==%00
	{
		CALL TickTimerB();
	}

	# Update Serial - TODO

	# Update State Of IRQ PIN
	CALL UpdateIRQPin();
	CALL UpdatePIN_PA();
	CALL UpdatePIN_PB();
}

HANDLER PIN_O2	TRANSITION(1,0)
{
	IF (~PIN_RW) & (PIN__CS==%0)
	{
		CALL UpdatePIN_DB_Write();
	}
	CALL UpdateIRQPin();
	CALL UpdatePIN_PA();
	CALL UpdatePIN_PB();
}
