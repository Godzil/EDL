#
# MOS 6532 (RIOT)
#
# Missing Interrupt flag read and edge detect. Everything else should be there.
#
#
#

PIN IN			AD[7];		# Address bits
PIN BIDIRECTIONAL	PA[8];		# Peripheral A
PIN BIDIRECTIONAL	PB[8];		# Peripheral B
PIN OUT			_IRQ[1];	# IRQ signal to processor
PIN BIDIRECTIONAL	DB[8];		# Data Bus
PIN IN			_RES[1];	# Reset
PIN IN			RW[1];		# Read(1) / Write(0)
PIN IN			_RS[1];		# Ram Select
PIN IN			_CS2[1];	# Chip Select
PIN IN			CS1[1];		# Chip Select
PIN IN			O2[1];		# Input Clock


DECLARE		RAM[[7]][8];

DECLARE		Counter[17] { %11111111111111111 };		# Timer with preScaler e.g. /1 = 0..7 /8 = 3..10 /64 = 6..13  /1024 = 10..17

DECLARE		TimerTypeLatch[2];

DECLARE		DDRA[8];
DECLARE		DDRB[8];


HANDLER	O2	TRANSITION(0,1)
{
	DECLARE reg[2];

	IF RW
	{
		IF (~_CS2) & CS1
		{
			IF ~_RS
			{
				DB<-RAM[[AD]];
			}
			IF _RS
			{
				IF AD[2..2]==0
				{
					reg<-AD[2];
					EXECUTE ReadRegister	reg;
				}
				IF AD[2..2]==1
				{
					IF AD[0..0]==0
					{
						EXECUTE ReadCounter TimerTypeLatch;
					}
					IF AD[0..0]==1
					{
						DEBUG_TRACE "RIOT - Read Interrupt Flag: ",BASE 16,AD;
					}
				} 
			}
		}
	}
	IF ~RW
	{
		IF (~_CS2) & CS1
		{
			IF ~_RS
			{
				RAM[[AD]]<-DB;
			}
			IF _RS
			{
				IF AD[2..2]==0
				{
					reg<-AD[2];
					EXECUTE WriteRegister	reg;
				}
				IF AD[2..2]==1
				{
					IF AD[4..4]==0
					{
						DEBUG_TRACE "RIOT - Edge Detect Write : ",BASE 16,AD;
					}
					IF AD[4..4]==1
					{
						TimerTypeLatch<-AD[2];

						Counter<-0;
						
						EXECUTE LoadCounter TimerTypeLatch;
					}
				}
			}
		}
	}
}

HANDLER O2	TRANSITION(1,0)
{
	DECLARE tOver[1];

	AFFECT tOver AS CARRY(16) {Counter-1}->Counter;

	IF tOver
	{
		TimerTypeLatch<-0;	# Force read of /1 counter after underflow
		#Set Interrupt
	}
}

### Register Read/Write Tables


INSTRUCTION ReadRegister	"RegA"	%00
{
	(PA&(~DDRA))|(DB&DDRA)->DB;
#	DEBUG_TRACE "RIOT - Read Output Reg A",DB;
}

INSTRUCTION ReadRegister	"DDRA"	%01
{
	DDRA->DB;
#	DEBUG_TRACE "RIOT - Read Output DDRA",DB;
}

INSTRUCTION ReadRegister	"RegB"	%10
{
	(PB&(~DDRB))|(DB&DDRB)->DB;
#	DEBUG_TRACE "RIOT - Read Output Reg B",DB;
}

INSTRUCTION ReadRegister	"DDRB"	%11
{
	DDRB->DB;
#	DEBUG_TRACE "RIOT - Read Output DDRB",DB;
}

INSTRUCTION WriteRegister	"RegA"	%00
{
	(PA&(~DDRA))|(DB&DDRA)->PA;
#	DEBUG_TRACE "RIOT - Write Output Reg A",PA;
}

INSTRUCTION WriteRegister	"DDRA"	%01
{
	DB->DDRA;
#	DEBUG_TRACE "RIOT - Write Output DDRA",DDRA;
}

INSTRUCTION WriteRegister	"RegB"	%10
{
	(PB&(~DDRB))|(DB&DDRB)->PB;
#	DEBUG_TRACE "RIOT - Write Output Reg B",PB;
}

INSTRUCTION WriteRegister	"DDRB"	%11
{
	DB->DDRB;
#	DEBUG_TRACE "RIOT - Write Output DDRB",DDRB;
}

INSTRUCTION LoadCounter	"/1"	%00
{
	DB->Counter[0..7];
	#DEBUG_TRACE "RIOT - Timer Write /1";
}

INSTRUCTION LoadCounter	"/8"	%01
{
	DB->Counter[3..10];
	#DEBUG_TRACE "RIOT - Timer Write /8";
}

INSTRUCTION LoadCounter	"/64"	%10
{
	DB->Counter[6..13];
	#DEBUG_TRACE "RIOT - Timer Write /64";
}

INSTRUCTION LoadCounter	"/1024"	%11
{
	DB->Counter[10..17];
	#DEBUG_TRACE "RIOT - Timer Write /1024";
}

INSTRUCTION ReadCounter	"/1"	%00
{
	DB<-Counter[0..7];
	#DEBUG_TRACE "RIOT - Timer Read /1",DB;
}

INSTRUCTION ReadCounter	"/8"	%01
{
	DB<-Counter[3..10];
	#DEBUG_TRACE "RIOT - Timer Read /8",DB;
}

INSTRUCTION ReadCounter	"/64"	%10
{
	DB<-Counter[6..13];
	#DEBUG_TRACE "RIOT - Timer Read /64",DB;
}

INSTRUCTION ReadCounter	"/1024"	%11
{
	DB<-Counter[10..17];
	#DEBUG_TRACE "RIOT - Timer Read /1024",DB;
}


