# MOS 6510 (NMOS) - Accurate Version
#
# This should be used like the real CPU, ie interact with the PIN_'s
#
#
#

PIN IN			PIN_O1[1];			# O1 Phase Clock Output
PIN IN			PIN_RDY[1];			# ReaDY signal for external devices
PIN IN			PIN__IRQ[1];			# Interrupt ReQuest
PIN IN			PIN__NMI[1];			# Non Maskable Interrupt request
PIN IN			PIN_AEC[1];			# When low - Address Bus/Data Bus/RW are in high impedence state (processor will effectively halt at the next memory fetch)
PIN OUT			PIN_A[16];			# Address Bus
PIN IN			PIN__RES[1];			# RESet
PIN OUT			PIN_O2[1];			# O2 Phase Clock Output
PIN OUT			PIN_RW[1];			# Read/Write indicator - 0 is write
PIN BIDIRECTIONAL	PIN_DB[8];			# Data Bus
PIN BIDIRECTIONAL	PIN_P[6];			# Parallel Port


# REAL REGISTERS FROM HARDWARE
DECLARE	A[8];
DECLARE X[8];
DECLARE Y[8];

DECLARE SP[16]		ALIAS	%00000001:S[8];

DECLARE	PC[16] 		ALIAS PCH[8]:PCL[8];

DECLARE	P[8]		ALIAS n[1]:v[1]:%1:b[1]:d[1]:i[1]:z[1]:c[1];
										# n negative : v overflow : b break : d decimal : i interrupt disable : z zero : c carry

DECLARE DEBUG_SYNC[1];		# Indicates we are doing the SYNC phase (Instruction Fetch) - helpful for debugging

# INTERNAL REGISTERS - NOT NEEDED OUTSIDE CPU 

DECLARE	INTERNAL AD[16]		ALIAS	ADH[8]:ADL[8];				# Used as temporary store for address generation
DECLARE INTERNAL BA[16]		ALIAS	BAH[8]:BAL[8];				# Used as temporary store for base address in index
DECLARE	INTERNAL IA[16]		ALIAS	IAH[8]:IAL[8];
DECLARE INTERNAL IAc[1];
DECLARE INTERNAL irq[1];
DECLARE INTERNAL nmi[1];
DECLARE INTERNAL res[1];

DECLARE INTERNAL MEMSTORE[8];
DECLARE INTERNAL IR[8];

DECLARE INTERNAL DDR[6];
DECLARE INTERNAL PCR[6];

DECLARE TMP[8];

FUNCTION INTERNAL UpdateP
{
	PIN_P<-PIN_P & (~DDR);
	PIN_P<-PIN_P | (PCR & (DDR));
}

HANDLER		PIN_P	ALWAYS
{
	CALL UpdateP();
}

HANDLER PIN__RES	ALWAYS
{
	IF ~PIN__RES
	{
		DDR<-$FF;
		PCR<-$FF;
		nmi<-0;
		res<-1;
	}
}

FUNCTION INTERNAL WriteIO
{
	IF PIN_A == 0
	{
		DDR<-PIN_DB;
	}
	IF PIN_A == 1
	{
		PCR<-PIN_DB;
		CALL UpdateP();
	}

}

FUNCTION INTERNAL ReadIO
{
	IF PIN_A == 0
	{
		PIN_DB<-DDR;
	}
	IF PIN_A == 1
	{
		PIN_DB<-PIN_P;
	}
}

HANDLER		PIN__NMI	TRANSITION(1,0)
{
	nmi<-1;
}

HANDLER		PIN_O1	TRANSITION(0,1)
{
#Will be doing memory request/writes

	STATES	FETCH|IMM|BA|IA|ADR|ADW|MW|PH|PL|DUMMY
	{
		STATE FETCH
		{
			PIN_A<-PC;
			PIN_RW<-1;
			DEBUG_SYNC<-1;
		}

		STATE IMM			# allows for a 1 byte or 2 byte immediate read
		{
			STATES LO,HI		# operation is the same regardless of LO or HI
			{
			}
			PIN_A<-PC;
			PIN_RW<-1;
		}

		STATE IA
		{
			STATES T0,T1
			{
			}
			PIN_A<-IA;
			PIN_RW<-1;
		}

		STATE BA
		{
			STATES T0,T1,T2
			{
			}
			PIN_A<-BA;
			PIN_RW<-1;
		}

		STATE PH
		{
			STATES T0,T1,T2
			{
			}
			PIN_A<-SP;
			S<-S-1;
			PIN_RW<-0;
			PIN_DB<-MEMSTORE;
			CALL WriteIO();
		}

		STATE PL
		{
			STATES T0,T1,T2,T3
			{
				STATE T0
				{
					PIN_A<-SP;
				}
				STATE T1
				{
					S<-S+1;
					PIN_A<-SP;
				}
				STATE T2
				{
					S<-S+1;
					PIN_A<-SP;
				}
				STATE T3
				{
					S<-S+1;
					PIN_A<-SP;
				}
			}
			PIN_RW<-1;
		}

		STATE ADR
		{
			PIN_A<-AD;
			PIN_RW<-1;
		}
		
		STATE ADW
		{
			PIN_A<-AD;
			PIN_RW<-0;
			PIN_DB<-MEMSTORE;
			CALL WriteIO();
		}

		STATE MW
		{
			STATES MODIFY,WRITE
			{
			}
			PIN_A<-AD;
			PIN_RW<-0;
			PIN_DB<-MEMSTORE;
			CALL WriteIO();
		}

		STATE DUMMY
		{
			STATES T0,T1
			{
			}
			PIN_A<-PC;
			PIN_RW<-1;
		}
	}
}

HANDLER		PIN_O1	TRANSITION(1,0)
{
	DEBUG_SYNC<-0;
	IF PIN_RW
	{
		CALL ReadIO();
	}
	IF PIN_O1.FETCH@ & (PIN__IRQ | i) & (~(nmi|res))
	{
		PIN_DB->IR;
		PC<-PC+1;
	}
	IF PIN_O1.FETCH@ & (~PIN__IRQ) & (~i)
	{
		irq<-1;
		$00->IR;
	}
	IF PIN_O1.FETCH@ & (nmi|res)
	{
		$00->IR;
	}

	IF PIN_O1.IMM@
	{
		PC<-PC+1;
	}

	EXECUTE IR;
}

FUNCTION INTERNAL	tmpRdy[1]	Immediate
{
	tmpRdy<-0;

	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM;
	}

	IF PIN_O1.IMM@
	{
		PIN_DB->TMP;
		tmpRdy<-1;
		NEXT PIN_O1.FETCH;
	}
}

FUNCTION INTERNAL	tmpRdy[1]	ZeroPage	store[1]
{
	tmpRdy<-0;

	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->ADL;
		0->ADH;
		NEXT PIN_O1.ADR;
		IF store
		{
			tmpRdy<-1;
			NEXT PIN_O1.ADW;
		}
	}

	IF PIN_O1.ADR@
	{
		PIN_DB->TMP;
		tmpRdy<-1;
		NEXT PIN_O1.FETCH;
	}
	
	IF PIN_O1.ADW@
	{
		NEXT PIN_O1.FETCH;
	}
}

FUNCTION INTERNAL	tmpRdy[1]	Absolute	store[1]
{
	tmpRdy<-0;

	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->ADL;
	}

	IF PIN_O1.IMM.HI@
	{
		PIN_DB->ADH;
		NEXT PIN_O1.ADR;
		IF store
		{
			tmpRdy<-1;
			NEXT PIN_O1.ADW;
		}
	}

	IF PIN_O1.ADR@
	{
		PIN_DB->TMP;
		tmpRdy<-1;
		NEXT PIN_O1.FETCH;
	}
	
	IF PIN_O1.ADW@
	{
		NEXT PIN_O1.FETCH;
	}
}

FUNCTION INTERNAL	tmpRdy[1]	IndirectX	store[1]
{
	tmpRdy<-0;

	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->BAL;
		0->BAH;
		NEXT PIN_O1.BA.T0;
	}

	IF PIN_O1.BA.T0@
	{
		BAL<-BAL+X;
	}

	IF PIN_O1.BA.T1@
	{
		PIN_DB->ADL;
		BAL<-BAL+1;
	}

	IF PIN_O1.BA.T2@
	{
		PIN_DB->ADH;
		NEXT PIN_O1.ADR;
		IF store
		{
			tmpRdy<-1;
			NEXT PIN_O1.ADW;
		}
	}

	IF PIN_O1.ADR@
	{
		PIN_DB->TMP;
		tmpRdy<-1;
		NEXT PIN_O1.FETCH;
	}
	
	IF PIN_O1.ADW@
	{
		NEXT PIN_O1.FETCH;
	}
}

FUNCTION INTERNAL	tmpRdy[1]	IndirectY	store[1]
{
	tmpRdy<-0;

	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->IAL;
		$00->IAH;
		NEXT PIN_O1.IA.T0;
	}

	IF PIN_O1.IA.T0@
	{
		PIN_DB->BAL;
		IAL<-IAL+1;
	}

	IF PIN_O1.IA.T1@
	{
		PIN_DB->BAH;
		AFFECT IAc AS CARRY(7)
		{
			BAL+Y
		}->BAL;
		AD<-BA;
		NEXT PIN_O1.ADR;
		IF IAc | store
		{
			NEXT PIN_O1.BA.T2;
		}
	}

	IF PIN_O1.BA.T2@
	{
		ADH<-BAH+IAc;
		NEXT PIN_O1.ADR;
		IF store
		{
			tmpRdy<-1;
			NEXT PIN_O1.ADW;
		}
	}

	IF PIN_O1.ADR@
	{
		PIN_DB->TMP;
		tmpRdy<-1;
		NEXT PIN_O1.FETCH;
	}
	
	IF PIN_O1.ADW@
	{
		NEXT PIN_O1.FETCH;
	}
}

FUNCTION INTERNAL	tmpRdy[1]	ZeroPageIndexed	store[1],index[8]
{
	tmpRdy<-0;

	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->BAL;
		0->BAH;
		NEXT PIN_O1.BA.T1;
	}

	IF PIN_O1.BA.T1@
	{
		BAL<-BAL+index;
		AD<-BA;
		NEXT PIN_O1.ADR;
		IF store
		{
			tmpRdy<-1;
			NEXT PIN_O1.ADW;
		}
	}

	IF PIN_O1.ADR@
	{
		PIN_DB->TMP;
		tmpRdy<-1;
		NEXT PIN_O1.FETCH;
	}
	
	IF PIN_O1.ADW@
	{
		NEXT PIN_O1.FETCH;
	}
}

FUNCTION INTERNAL	tmpRdy[1]	AbsoluteIndexed	store[1],index[8]
{
	tmpRdy<-0;

	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->BAL;
	}

	IF PIN_O1.IMM.HI@
	{
		PIN_DB->BAH;
		AFFECT IAc AS CARRY(7)
		{
			BAL + index
		}->BAL;
		AD<-BA;
		NEXT PIN_O1.ADR;
		IF IAc | store
		{
			NEXT PIN_O1.BA.T2;
		}
	}

	IF PIN_O1.BA.T2@
	{
		ADH<-BAH+IAc;
		NEXT PIN_O1.ADR;
		IF store
		{
			tmpRdy<-1;
			NEXT PIN_O1.ADW;
		}
	}

	IF PIN_O1.ADR@
	{
		PIN_DB->TMP;
		tmpRdy<-1;
		NEXT PIN_O1.FETCH;
	}
	
	IF PIN_O1.ADW@
	{
		NEXT PIN_O1.FETCH;
	}
}

MAPPING addressing01[3]
{
	%000	"(%$1,X)"	CALL IndirectX(0);
	%001	"%$1"		CALL ZeroPage(0);
	%010	"#%$1"		CALL Immediate();
	%011	"%$2%$1"	CALL Absolute(0);
	%100	"(%$1),Y"	CALL IndirectY(0);
	%101	"%$1,X"		CALL ZeroPageIndexed(0,X);
	%110	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
	%111	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
}

FUNCTION INTERNAL	res[8]	ADC	src1[8],src2[8]
{
	DECLARE ALUTmp[8] ALIAS ALUH[4]:ALUL[4];
	DECLARE s1[8] ALIAS s1H[4]:s1L[4];
	DECLARE s2[8] ALIAS s2H[4]:s2L[4];
	DECLARE hc[1];

	s1<-src1;
	s2<-src2;

	AFFECT hc AS CARRY(3) {(s1L + s2L) + c}->ALUL;

	IF d
	{	
		IF (ALUL>9)
		{
			hc<-1;
		}
	}

	AFFECT n AS SIGN,v AS OVERFLOW(s1H,s2H,3), c AS CARRY(3) {(s1H + s2H) + hc}->ALUH;
	AFFECT z AS ZERO { ALUTmp };

	IF d
	{
		IF hc
		{
			ALUL+6->ALUL;
		}
		IF c | (ALUH>9)
		{
			ALUH+6->ALUH;
			c<-1;
		}
	}

	ALUTmp->res;
}

FUNCTION INTERNAL	res[8]	SBC	src1[8],src2[8]
{
	DECLARE ALUTmp[8] ALIAS ALUH[4]:ALUL[4];
	DECLARE s1[8] ALIAS s1H[4]:s1L[4];
	DECLARE s2[8] ALIAS s2H[4]:s2L[4];
	DECLARE hc[1];

	s1<-src1;
	s2<-src2;

	AFFECT hc AS NOCARRY(3) {(s1L - s2L) - (~c)}->ALUL;
	AFFECT n AS SIGN,v AS OVERFLOW(s1H,s2H,3), c AS NOCARRY(3) {(s1H - s2H) - (~hc)}->ALUH;
	AFFECT z AS ZERO { ALUTmp };

	IF d
	{
		IF ~hc
		{
			ALUL-6->ALUL;
		}
		IF ~c
		{
			ALUH-6->ALUH;
		}
	}

	ALUTmp->res;
}

MAPPING operation01[3]
{
	%000	"ORA"	AFFECT z AS ZERO, n AS SIGN { A | TMP }->A;
	%001	"AND"	AFFECT z AS ZERO, n AS SIGN { A & TMP }->A;
	%010	"EOR"	AFFECT z AS ZERO, n AS SIGN { A ^ TMP }->A;
	%011	"ADC"	CALL ADC(A,TMP)->A;
	%101	"LDA"	AFFECT z AS ZERO, n AS SIGN { TMP }->A;
	%110	"CMP"	AFFECT z AS ZERO, n AS SIGN, c AS NOCARRY(7) { A - TMP};
	%111	"SBC"	CALL SBC(A,TMP)->A;
}


MAPPING addressing01_sta[3]
{
	%000	"(%$1,X)"	CALL IndirectX(1);
	%001	"%$1"		CALL ZeroPage(1);
	%011	"%$2%$1"	CALL Absolute(1);
	%100	"(%$1),Y"	CALL IndirectY(1);
	%101	"%$1,X"		CALL ZeroPageIndexed(1,X);
	%110	"%$2%$1,Y"	CALL AbsoluteIndexed(1,Y);
	%111	"%$2%$1,X"	CALL AbsoluteIndexed(1,X);
}

INSTRUCTION	"%M0 %M1"	operation01:addressing01:%01
{
	IF addressing01
	{
		operation01;
	}
}

INSTRUCTION	"STA %M0"	%100:addressing01_sta:%01
{
	IF addressing01_sta
	{
		MEMSTORE<-A;
	}
}

MAPPING addressing10[3]
{
#	%000	"#%$1"		CALL Immediate();	# Handled seperately
	%001	"%$1"		CALL ZeroPage(0);
#	%010	"#%$1"		A;			# Handled seperately
	%011	"%$2%$1"	CALL Absolute(0);
	%101	"%$1,X"		CALL ZeroPageIndexed(0,X);
	%111	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
}

MAPPING operation10[3]
{
	%000	"ASL"	AFFECT z AS ZERO, n AS SIGN { ROL(TMP,c,0,1) }->TMP;
	%001	"ROL"	AFFECT z AS ZERO, n AS SIGN { ROL(TMP,c,c,1) }->TMP;
	%010	"LSR"	AFFECT z AS ZERO, n AS SIGN { ROR(TMP,c,0,1) }->TMP;
	%011	"ROR"	AFFECT z AS ZERO, n AS SIGN { ROR(TMP,c,c,1) }->TMP;
#	%100	"STX"	;		# Handled seperately
#	%101	"LDX"	;		# Handled seperately
	%110	"DEC"	AFFECT z AS ZERO, n AS SIGN { TMP - 1}->TMP;
	%111	"INC"	AFFECT z AS ZERO, n AS SIGN { TMP + 1}->TMP;
}

INSTRUCTION	"%M0 %M1"	operation10:addressing10:%10
{
	IF addressing10
	{
		MEMSTORE<-TMP;
		NEXT PIN_O1.MW.MODIFY;
	}

	IF PIN_O1.MW.MODIFY@
	{
		operation10;
		MEMSTORE<-TMP;
	}

	IF PIN_O1.MW.WRITE@
	{
		NEXT PIN_O1.FETCH;
	}
}

MAPPING operation10_A[3]
{
	%000	"ASL A"	AFFECT z AS ZERO, n AS SIGN { ROL(A,c,0,1) }->A;
	%001	"ROL A"	AFFECT z AS ZERO, n AS SIGN { ROL(A,c,c,1) }->A;
	%010	"LSR A"	AFFECT z AS ZERO, n AS SIGN { ROR(A,c,0,1) }->A;
	%011	"ROR A"	AFFECT z AS ZERO, n AS SIGN { ROR(A,c,c,1) }->A;
}

INSTRUCTION	"%M0"		operation10_A:%010:%10
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		operation10_A;
		NEXT PIN_O1.FETCH;
	}
}

MAPPING addressing10_LDX[3]
{
	%000	"#%$1"		CALL Immediate();
	%001	"%$1"		CALL ZeroPage(0);
	%011	"%$2%$1"	CALL Absolute(0);
	%101	"%$1,Y"		CALL ZeroPageIndexed(0,Y);
	%111	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
}

INSTRUCTION	"LDX %M0"	%101:addressing10_LDX:%10
{
	IF addressing10_LDX
	{
		AFFECT z AS ZERO,n AS SIGN
		{
			TMP
		}->X;
	}
}

MAPPING addressing10_STX[3]
{
	%001	"%$1"		CALL ZeroPage(1);
	%011	"%$2%$1"	CALL Absolute(1);
	%101	"%$1,Y"		CALL ZeroPageIndexed(1,Y);
}

INSTRUCTION	"STX %M0"	%100:addressing10_STX:%10
{
	IF addressing10_STX
	{
		MEMSTORE<-X;
	}
}

MAPPING addressing00_LDY[3]
{
	%000	"#%$1"		CALL Immediate();
	%001	"%$1"		CALL ZeroPage(0);
	%011	"%$2%$1"	CALL Absolute(0);
	%101	"%$1,X"		CALL ZeroPageIndexed(0,X);
	%111	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
}

INSTRUCTION	"LDY %M0"	%101:addressing00_LDY:%00
{
	IF addressing00_LDY
	{
		AFFECT z AS ZERO,n AS SIGN
		{
			TMP
		}->Y;
	}
}

MAPPING addressing00_STY[3]
{
	%001	"%$1"		CALL ZeroPage(1);
	%011	"%$2%$1"	CALL Absolute(1);
	%101	"%$1,X"		CALL ZeroPageIndexed(1,X);
}

INSTRUCTION	"STY %M0"	%100:addressing00_STY:%00
{
	IF addressing00_STY
	{
		MEMSTORE<-Y;
	}
}

MAPPING addressing00_CP[3]
{
	%000	"#%$1"		CALL Immediate();
	%001	"%$1"		CALL ZeroPage(0);
	%011	"%$2%$1"	CALL Absolute(0);
}

MAPPING operation00_CP[3]
{
	%110	"CPY"	AFFECT z AS ZERO, n AS SIGN, c AS NOCARRY(7) { Y - TMP};
	%111	"CPX"	AFFECT z AS ZERO, n AS SIGN, c AS NOCARRY(7) { X - TMP};
}

INSTRUCTION	"%M0 %M1"	operation00_CP:addressing00_CP:%00
{
	IF addressing00_CP
	{
		operation00_CP;
	}	
}

MAPPING addressing00_BIT[3]
{
	%001	"%$1"		CALL ZeroPage(0);
	%011	"%$2%$1"	CALL Absolute(0);
}

INSTRUCTION	"BIT %M0"	%001:addressing00_BIT:%00
{
	IF addressing00_BIT
	{
		AFFECT z AS ZERO
		{
			A & TMP
		};
		AFFECT n AS BIT(7), v AS BIT(6)
		{
			TMP
		};
	}
}

INSTRUCTION	"JMP %$2%$1"	%01001100
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->ADL;
	}

	IF PIN_O1.IMM.HI@
	{
		PIN_DB->ADH;
		PC<-AD;
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"JMP (%$2%$1)"	%01101100
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->IAL;
	}

	IF PIN_O1.IMM.HI@
	{
		PIN_DB->IAH;
		NEXT PIN_O1.IA.T0;
	}

	IF PIN_O1.IA.T0@
	{
		PIN_DB->ADL;
		IAL<-IAL+1;
	}

	IF PIN_O1.IA.T1@
	{
		PIN_DB->ADH;
		PC<-AD;
		NEXT PIN_O1.FETCH;
	}
}

MAPPING	ccc[3]
{
	%000	"PL"	n==0;
	%001	"MI"	n==1;
	%010	"VC"	v==0;
	%011	"VS"	v==1;
	%100	"CC"	c==0;
	%101	"CS"	c==1;
	%110	"NE"	z==0;
	%111	"EQ"	z==1;
}

INSTRUCTION	"B%M0 %$1"	ccc:%10000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->TMP;
		NEXT PIN_O1.FETCH;
		IF ccc
		{
			NEXT PIN_O1.DUMMY.T0;
		}
	}

	IF PIN_O1.DUMMY.T0@
	{
		DECLARE sign[1];
		sign<-TMP[7..7];
		AFFECT IAc AS CARRY(7)
		{
			PCL + TMP
		}->PCL;
		NEXT PIN_O1.FETCH;
		IF IAc ^ sign
		{
			NEXT PIN_O1.DUMMY.T1;
		}
	}

	IF PIN_O1.DUMMY.T1@
	{
		PCH<-PCH+$FF+IAc+IAc;
		NEXT PIN_O1.FETCH;
	}

}

MAPPING operation00_CS[3]
{
	%000	"CLC"		c<-0;
	%001	"SEC"		c<-1;
	%010	"CLI"		i<-0;
	%011	"SEI"		i<-1;
	%100	"TYA"		AFFECT z AS ZERO,n AS SIGN { Y }->A;
	%101	"CLV"		v<-0;
	%110	"CLD"		d<-0;
	%111	"SED"		d<-1;
}

INSTRUCTION	"%M0"		operation00_CS:%11000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		operation00_CS;
		NEXT PIN_O1.FETCH;
	}
}

MAPPING operation00_TS[3]
{
	%000	"TXA"		AFFECT z AS ZERO,n AS SIGN { X }->A;
	%001	"TXS"		X->S;
	%010	"TAX"		AFFECT z AS ZERO,n AS SIGN { A }->X;
	%011	"TSX"		AFFECT z AS ZERO,n AS SIGN { S }->X;
	%100	"DEX"		AFFECT z AS ZERO,n AS SIGN { X - 1 }->X;
	%110	"NOP"		A->A;
}


INSTRUCTION	"%M0"		%1:operation00_TS:%1010
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		operation00_TS;
		NEXT PIN_O1.FETCH;
	}
}

MAPPING operation00_DI[3]
{
	%100	"DEY"		AFFECT z AS ZERO,n AS SIGN { Y - 1 }->Y;
	%101	"TAY"		AFFECT z AS ZERO,n AS SIGN { A }->Y;
	%110	"INY"		AFFECT z AS ZERO,n AS SIGN { Y + 1 }->Y;
	%111	"INX"		AFFECT z AS ZERO,n AS SIGN { X + 1 }->X;
}


INSTRUCTION	"%M0"		operation00_DI:%01000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		operation00_DI;
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"PHP"		%00001000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		b<-1;
		MEMSTORE<-P;			# B is seen as set when pushed
		NEXT PIN_O1.PH.T0;
	}

	IF PIN_O1.PH.T0@
	{
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"PHA"		%01001000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		MEMSTORE<-A;
		NEXT PIN_O1.PH.T0;
	}

	IF PIN_O1.PH.T0@
	{
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"PLP"		%00101000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		NEXT PIN_O1.PL.T0;
	}

	IF PIN_O1.PL.T1@
	{
		PIN_DB->P;
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"PLA"		%01101000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		NEXT PIN_O1.PL.T0;
	}

	IF PIN_O1.PL.T1@
	{
		PIN_DB->A;
		AFFECT z AS ZERO,n AS SIGN
		{
			A
		};
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"BRK"		%00000000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
		IF irq | nmi | res
		{
			NEXT PIN_O1.DUMMY.T0;
		}
	}

	IF PIN_O1.DUMMY.T0@ | PIN_O1.IMM.LO@
	{
		MEMSTORE<-PCH;
		NEXT PIN_O1.PH.T0;
		IF res
		{
			$FFFC->IA;
			NEXT PIN_O1.IA.T0;
		}
	}

	IF PIN_O1.PH.T0@
	{
		MEMSTORE<-PCL;
	}

	IF PIN_O1.PH.T1@
	{
		IF irq | nmi
		{
			b<-0;
			MEMSTORE<-P;
		}
		IF (~irq) & (~nmi)
		{
			b<-1;
			MEMSTORE<-P;
		}
	}

	IF PIN_O1.PH.T2@
	{
		IF ~nmi
		{
			$FFFE->IA;
		}
		IF nmi
		{
			$FFFA->IA;
		}
		NEXT PIN_O1.IA.T0;
	}

	IF PIN_O1.IA.T0@
	{
		PIN_DB->ADL;
		IAL<-IAL+1;
	}

	IF PIN_O1.IA.T1@
	{
		PIN_DB->ADH;
		PC<-AD;
		i<-1;
		irq<-0;
		nmi<-0;
		res<-0;
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"JSR %$2%$1"		%00100000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.IMM.LO;
	}

	IF PIN_O1.IMM.LO@
	{
		PIN_DB->ADL;
		NEXT PIN_O1.PL.T0;
	}

	IF PIN_O1.PL.T0@
	{
		MEMSTORE<-PCH;
		NEXT PIN_O1.PH.T0;
	}

	IF PIN_O1.PH.T0@
	{
		MEMSTORE<-PCL;
	}

	IF PIN_O1.PH.T1@
	{
		NEXT PIN_O1.IMM.HI;
	}

	IF PIN_O1.IMM.HI@
	{
		PIN_DB->ADH;
		PC<-AD;
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"RTI"			%01000000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		NEXT PIN_O1.PL.T0;
	}

	IF PIN_O1.PL.T1@
	{
		PIN_DB->P;
	}

	IF PIN_O1.PL.T2@
	{
		PIN_DB->PCL;
	}

	IF PIN_O1.PL.T3@
	{
		PIN_DB->PCH;
		NEXT PIN_O1.FETCH;
	}
}

INSTRUCTION	"RTS"			%01100000
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		NEXT PIN_O1.PL.T0;
	}

	IF PIN_O1.PL.T1@
	{
		PIN_DB->PCL;
	}

	IF PIN_O1.PL.T2@
	{
		PIN_DB->PCH;
		NEXT PIN_O1.DUMMY.T1;
	}

	IF PIN_O1.DUMMY.T1@
	{
		PC<-PC+1;
		NEXT PIN_O1.FETCH;
	}
}

#### Below are implementations for the undocumented instructions - They may not produce exact behaviour in the case of unstable instructions ####

MAPPING opcodeSKW[4]
{
	%0000	"%$2%$1"	CALL Absolute(0);
	%0001	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	%0011	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	%0101	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	%0111	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	%1101	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	%1111	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
}

INSTRUCTION	"SKW %M0"	opcodeSKW:%1100
{
	opcodeSKW;
}

MAPPING opcodeSKB[8]
{
	$04	"%$1"		CALL ZeroPage(0);
	$14	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$34	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$44	"%$1"		CALL ZeroPage(0);
	$54	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$64	"%$1"		CALL ZeroPage(0);
	$74	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$80	"#%$1"		CALL Immediate();
	$82	"#%$1"		CALL Immediate();
	$89	"#%$1"		CALL Immediate();
	$C2	"#%$1"		CALL Immediate();
	$D4	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$E2	"#%$1"		CALL Immediate();
	$F4	"%$1,X"		CALL ZeroPageIndexed(0,X);
}

INSTRUCTION	"SKB %M0"	opcodeSKB
{
	opcodeSKB;
}

MAPPING opcodeNOP[8]
{
	$1A	""		A->A;
	$3A	""		A->A;
	$5A	""		A->A;
	$7A	""		A->A;
	$DA	""		A->A;
	$FA	""		A->A;
}

INSTRUCTION	"NOP"		opcodeNOP
{
	IF PIN_O1.FETCH@
	{
		NEXT PIN_O1.DUMMY.T0;
	}

	IF PIN_O1.DUMMY.T0@
	{
		opcodeNOP;
		NEXT PIN_O1.FETCH;
	}
}

MAPPING opcodeANC[1]
{
	%0	"#%$1"		CALL Immediate();
	%1	"#%$1"		CALL Immediate();
}

INSTRUCTION	"AAC %M0"	%00:opcodeANC:%01011
{
	IF opcodeANC
	{
		AFFECT z AS ZERO, n AS SIGN, c AS SIGN { A & TMP }->A;
	}
}

MAPPING opcodeLAX[8]
{
	$A7	"%$1"		CALL ZeroPage(0);
	$B7	"%$1,Y"		CALL ZeroPageIndexed(0,Y);
	$AF	"%$2%$1"	CALL Absolute(0);
	$BF	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
	$A3	"(%$1,X)"	CALL IndirectX(0);
	$B3	"(%$1),Y"	CALL IndirectY(0);
}

INSTRUCTION	"LAX %M0"	opcodeLAX
{
	IF opcodeLAX
	{
		AFFECT z AS ZERO, n AS SIGN { TMP }->A;
		A->X;
	}
}

MAPPING opcodeDCP[8]
{
	$C7	"%$1"		CALL ZeroPage(0);
	$D7	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$CF	"%$2%$1"	CALL Absolute(0);
	$DF	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	$DB	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
	$C3	"(%$1,X)"	CALL IndirectX(0);
	$D3	"(%$1),Y"	CALL IndirectY(0);
}

INSTRUCTION	"DCP %M0"	opcodeDCP
{
	IF opcodeDCP
	{
		MEMSTORE<-TMP;
		NEXT PIN_O1.MW.MODIFY;
	}

	IF PIN_O1.MW.MODIFY@
	{
		TMP - 1->TMP;
		AFFECT z AS ZERO, n AS SIGN, c AS NOCARRY(7) { A - TMP };
		MEMSTORE<-TMP;
	}

	IF PIN_O1.MW.WRITE@
	{
		NEXT PIN_O1.FETCH;
	}
}

MAPPING opcodeSLO[8]
{
	$07	"%$1"		CALL ZeroPage(0);
	$17	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$0F	"%$2%$1"	CALL Absolute(0);
	$1F	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	$1B	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
	$03	"(%$1,X)"	CALL IndirectX(0);
	$13	"(%$1),Y"	CALL IndirectY(0);
}
#
#MAPPING operationSLO[3]
#{
#	%000	"ASL"	AFFECT z AS ZERO, n AS SIGN { ROL(TMP,c,0,1) }->TMP;
#	%001	"ROL"	AFFECT z AS ZERO, n AS SIGN { ROL(TMP,c,c,1) }->TMP;
#	%010	"LSR"	AFFECT z AS ZERO, n AS SIGN { ROR(TMP,c,0,1) }->TMP;
#	%011	"ROR"	AFFECT z AS ZERO, n AS SIGN { ROR(TMP,c,c,1) }->TMP;
##	%100	"STX"	;		# Handled seperately
##	%101	"LDX"	;		# Handled seperately
#	%110	"DEC"	AFFECT z AS ZERO, n AS SIGN { TMP - 1}->TMP;
#	%111	"INC"	AFFECT z AS ZERO, n AS SIGN { TMP + 1}->TMP;
#}
#
INSTRUCTION	"SLO %M0"	opcodeSLO
{
	IF opcodeSLO
	{
		MEMSTORE<-TMP;
		NEXT PIN_O1.MW.MODIFY;
	}

	IF PIN_O1.MW.MODIFY@
	{
		AFFECT z AS ZERO, n AS SIGN { ROL(TMP,c,0,1) }->TMP;
		AFFECT z AS ZERO, n AS SIGN { A | TMP }->A;
		MEMSTORE<-TMP;
	}

	IF PIN_O1.MW.WRITE@
	{
		NEXT PIN_O1.FETCH;
	}
}

MAPPING opcodeRLA[8]
{
	$27	"%$1"		CALL ZeroPage(0);
	$37	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$2F	"%$2%$1"	CALL Absolute(0);
	$3F	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	$3B	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
	$23	"(%$1,X)"	CALL IndirectX(0);
	$33	"(%$1),Y"	CALL IndirectY(0);
}

INSTRUCTION	"RLA %M0"	opcodeRLA
{
	IF opcodeRLA
	{
		MEMSTORE<-TMP;
		NEXT PIN_O1.MW.MODIFY;
	}

	IF PIN_O1.MW.MODIFY@
	{
		AFFECT z AS ZERO, n AS SIGN { ROL(TMP,c,c,1) }->TMP;
		AFFECT z AS ZERO, n AS SIGN { A & TMP }->A;
		MEMSTORE<-TMP;
	}

	IF PIN_O1.MW.WRITE@
	{
		NEXT PIN_O1.FETCH;
	}
}

MAPPING opcodeSRE[8]
{
	$47	"%$1"		CALL ZeroPage(0);
	$57	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$4F	"%$2%$1"	CALL Absolute(0);
	$5F	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	$5B	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
	$43	"(%$1,X)"	CALL IndirectX(0);
	$53	"(%$1),Y"	CALL IndirectY(0);
}

INSTRUCTION	"SRE %M0"	opcodeSRE
{
	IF opcodeSRE
	{
		MEMSTORE<-TMP;
		NEXT PIN_O1.MW.MODIFY;
	}

	IF PIN_O1.MW.MODIFY@
	{
		AFFECT z AS ZERO, n AS SIGN { ROR(TMP,c,0,1) }->TMP;
		AFFECT z AS ZERO, n AS SIGN { A ^ TMP }->A;
		MEMSTORE<-TMP;
	}

	IF PIN_O1.MW.WRITE@
	{
		NEXT PIN_O1.FETCH;
	}
}

MAPPING opcodeRRA[8]
{
	$67	"%$1"		CALL ZeroPage(0);
	$77	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$6F	"%$2%$1"	CALL Absolute(0);
	$7F	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	$7B	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
	$63	"(%$1,X)"	CALL IndirectX(0);
	$73	"(%$1),Y"	CALL IndirectY(0);
}

INSTRUCTION	"RRA %M0"	opcodeRRA
{
	IF opcodeRRA
	{
		MEMSTORE<-TMP;
		NEXT PIN_O1.MW.MODIFY;
	}

	IF PIN_O1.MW.MODIFY@
	{
		AFFECT z AS ZERO, n AS SIGN { ROR(TMP,c,c,1) }->TMP;
		CALL ADC(A,TMP)->A;
		MEMSTORE<-TMP;
	}

	IF PIN_O1.MW.WRITE@
	{
		NEXT PIN_O1.FETCH;
	}
}

MAPPING opcodeISC[8]
{
	$E7	"%$1"		CALL ZeroPage(0);
	$F7	"%$1,X"		CALL ZeroPageIndexed(0,X);
	$EF	"%$2%$1"	CALL Absolute(0);
	$FF	"%$2%$1,X"	CALL AbsoluteIndexed(0,X);
	$FB	"%$2%$1,Y"	CALL AbsoluteIndexed(0,Y);
	$E3	"(%$1,X)"	CALL IndirectX(0);
	$F3	"(%$1),Y"	CALL IndirectY(0);
}

INSTRUCTION	"ISC %M0"	opcodeISC
{
	IF opcodeISC
	{
		MEMSTORE<-TMP;
		NEXT PIN_O1.MW.MODIFY;
	}

	IF PIN_O1.MW.MODIFY@
	{
		AFFECT z AS ZERO, n AS SIGN { TMP + 1}->TMP;
		CALL SBC(A,TMP)->A;
		MEMSTORE<-TMP;
	}

	IF PIN_O1.MW.WRITE@
	{
		NEXT PIN_O1.FETCH;
	}
}

MAPPING opcodeAAX[8]
{
	$87	"%$1"		CALL ZeroPage(1);
	$97	"%$1,Y"		CALL ZeroPageIndexed(1,Y);
	$83	"(%$1,X)"	CALL IndirectX(1);
	$8F	"%$2%$1"	CALL Absolute(1);
}

INSTRUCTION	"AAX %M0"	opcodeAAX
{
	IF opcodeAAX
	{
		MEMSTORE<- A & X;
	}
}



